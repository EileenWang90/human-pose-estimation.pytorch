PoseMobileNet(
  (features): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (1): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(8, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)
        (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288, bias=False)
        (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288, bias=False)
        (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(288, 288, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=288, bias=False)
        (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(288, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
        (4): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
        (4): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (17): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
        (4): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(480, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Sequential(
    (0): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (deconv_layers): Sequential(
    (0): ConvTranspose2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): ConvTranspose2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (10): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU(inplace=True)
    (12): ConvTranspose2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
    (13): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (14): ReLU(inplace=True)
    (15): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (16): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
  )
  (final_layer): Conv2d(128, 17, kernel_size=(1, 1), stride=(1, 1), bias=False)
)

Model.state_dict:
0 features.0.0.weight    torch.Size([16, 3, 3, 3])
1 features.0.1.weight    torch.Size([16])
2 features.0.1.bias      torch.Size([16])
3 features.0.1.running_mean      torch.Size([16])
4 features.0.1.running_var       torch.Size([16])
5 features.0.1.num_batches_tracked       torch.Size([])
6 features.1.conv.0.weight       torch.Size([16, 1, 3, 3])
7 features.1.conv.1.weight       torch.Size([16])
8 features.1.conv.1.bias         torch.Size([16])
9 features.1.conv.1.running_mean         torch.Size([16])
10 features.1.conv.1.running_var         torch.Size([16])
11 features.1.conv.1.num_batches_tracked         torch.Size([])
12 features.1.conv.3.weight      torch.Size([8, 16, 1, 1])
13 features.1.conv.4.weight      torch.Size([8])
14 features.1.conv.4.bias        torch.Size([8])
15 features.1.conv.4.running_mean        torch.Size([8])
16 features.1.conv.4.running_var         torch.Size([8])
17 features.1.conv.4.num_batches_tracked         torch.Size([])
18 features.2.conv.0.weight      torch.Size([48, 8, 1, 1])
19 features.2.conv.1.weight      torch.Size([48])
20 features.2.conv.1.bias        torch.Size([48])
21 features.2.conv.1.running_mean        torch.Size([48])
22 features.2.conv.1.running_var         torch.Size([48])
23 features.2.conv.1.num_batches_tracked         torch.Size([])
24 features.2.conv.3.weight      torch.Size([48, 1, 3, 3])
25 features.2.conv.4.weight      torch.Size([48])
26 features.2.conv.4.bias        torch.Size([48])
27 features.2.conv.4.running_mean        torch.Size([48])
28 features.2.conv.4.running_var         torch.Size([48])
29 features.2.conv.4.num_batches_tracked         torch.Size([])
30 features.2.conv.6.weight      torch.Size([16, 48, 1, 1])
31 features.2.conv.7.weight      torch.Size([16])
32 features.2.conv.7.bias        torch.Size([16])
33 features.2.conv.7.running_mean        torch.Size([16])
34 features.2.conv.7.running_var         torch.Size([16])
35 features.2.conv.7.num_batches_tracked         torch.Size([])
36 features.3.conv.0.weight      torch.Size([96, 16, 1, 1])
37 features.3.conv.1.weight      torch.Size([96])
38 features.3.conv.1.bias        torch.Size([96])
39 features.3.conv.1.running_mean        torch.Size([96])
40 features.3.conv.1.running_var         torch.Size([96])
41 features.3.conv.1.num_batches_tracked         torch.Size([])
42 features.3.conv.3.weight      torch.Size([96, 1, 3, 3])
43 features.3.conv.4.weight      torch.Size([96])
44 features.3.conv.4.bias        torch.Size([96])
45 features.3.conv.4.running_mean        torch.Size([96])
46 features.3.conv.4.running_var         torch.Size([96])
47 features.3.conv.4.num_batches_tracked         torch.Size([])
48 features.3.conv.6.weight      torch.Size([16, 96, 1, 1])
49 features.3.conv.7.weight      torch.Size([16])
50 features.3.conv.7.bias        torch.Size([16])
51 features.3.conv.7.running_mean        torch.Size([16])
52 features.3.conv.7.running_var         torch.Size([16])
53 features.3.conv.7.num_batches_tracked         torch.Size([])
54 features.4.conv.0.weight      torch.Size([96, 16, 1, 1])
55 features.4.conv.1.weight      torch.Size([96])
56 features.4.conv.1.bias        torch.Size([96])
57 features.4.conv.1.running_mean        torch.Size([96])
58 features.4.conv.1.running_var         torch.Size([96])
59 features.4.conv.1.num_batches_tracked         torch.Size([])
60 features.4.conv.3.weight      torch.Size([96, 1, 3, 3])
61 features.4.conv.4.weight      torch.Size([96])
62 features.4.conv.4.bias        torch.Size([96])
63 features.4.conv.4.running_mean        torch.Size([96])
64 features.4.conv.4.running_var         torch.Size([96])
65 features.4.conv.4.num_batches_tracked         torch.Size([])
66 features.4.conv.6.weight      torch.Size([16, 96, 1, 1])
67 features.4.conv.7.weight      torch.Size([16])
68 features.4.conv.7.bias        torch.Size([16])
69 features.4.conv.7.running_mean        torch.Size([16])
70 features.4.conv.7.running_var         torch.Size([16])
71 features.4.conv.7.num_batches_tracked         torch.Size([])
72 features.5.conv.0.weight      torch.Size([96, 16, 1, 1])
73 features.5.conv.1.weight      torch.Size([96])
74 features.5.conv.1.bias        torch.Size([96])
75 features.5.conv.1.running_mean        torch.Size([96])
76 features.5.conv.1.running_var         torch.Size([96])
77 features.5.conv.1.num_batches_tracked         torch.Size([])
78 features.5.conv.3.weight      torch.Size([96, 1, 3, 3])
79 features.5.conv.4.weight      torch.Size([96])
80 features.5.conv.4.bias        torch.Size([96])
81 features.5.conv.4.running_mean        torch.Size([96])
82 features.5.conv.4.running_var         torch.Size([96])
83 features.5.conv.4.num_batches_tracked         torch.Size([])
84 features.5.conv.6.weight      torch.Size([16, 96, 1, 1])
85 features.5.conv.7.weight      torch.Size([16])
86 features.5.conv.7.bias        torch.Size([16])
87 features.5.conv.7.running_mean        torch.Size([16])
88 features.5.conv.7.running_var         torch.Size([16])
89 features.5.conv.7.num_batches_tracked         torch.Size([])
90 features.6.conv.0.weight      torch.Size([96, 16, 1, 1])
91 features.6.conv.1.weight      torch.Size([96])
92 features.6.conv.1.bias        torch.Size([96])
93 features.6.conv.1.running_mean        torch.Size([96])
94 features.6.conv.1.running_var         torch.Size([96])
95 features.6.conv.1.num_batches_tracked         torch.Size([])
96 features.6.conv.3.weight      torch.Size([96, 1, 3, 3])
97 features.6.conv.4.weight      torch.Size([96])
98 features.6.conv.4.bias        torch.Size([96])
99 features.6.conv.4.running_mean        torch.Size([96])
100 features.6.conv.4.running_var        torch.Size([96])
101 features.6.conv.4.num_batches_tracked        torch.Size([])
102 features.6.conv.6.weight     torch.Size([16, 96, 1, 1])
103 features.6.conv.7.weight     torch.Size([16])
104 features.6.conv.7.bias       torch.Size([16])
105 features.6.conv.7.running_mean       torch.Size([16])
106 features.6.conv.7.running_var        torch.Size([16])
107 features.6.conv.7.num_batches_tracked        torch.Size([])
108 features.7.conv.0.weight     torch.Size([96, 16, 1, 1])
109 features.7.conv.1.weight     torch.Size([96])
110 features.7.conv.1.bias       torch.Size([96])
111 features.7.conv.1.running_mean       torch.Size([96])
112 features.7.conv.1.running_var        torch.Size([96])
113 features.7.conv.1.num_batches_tracked        torch.Size([])
114 features.7.conv.3.weight     torch.Size([96, 1, 3, 3])
115 features.7.conv.4.weight     torch.Size([96])
116 features.7.conv.4.bias       torch.Size([96])
117 features.7.conv.4.running_mean       torch.Size([96])
118 features.7.conv.4.running_var        torch.Size([96])
119 features.7.conv.4.num_batches_tracked        torch.Size([])
120 features.7.conv.6.weight     torch.Size([32, 96, 1, 1])
121 features.7.conv.7.weight     torch.Size([32])
122 features.7.conv.7.bias       torch.Size([32])
123 features.7.conv.7.running_mean       torch.Size([32])
124 features.7.conv.7.running_var        torch.Size([32])
125 features.7.conv.7.num_batches_tracked        torch.Size([])
126 features.8.conv.0.weight     torch.Size([192, 32, 1, 1])
127 features.8.conv.1.weight     torch.Size([192])
128 features.8.conv.1.bias       torch.Size([192])
129 features.8.conv.1.running_mean       torch.Size([192])
130 features.8.conv.1.running_var        torch.Size([192])
131 features.8.conv.1.num_batches_tracked        torch.Size([])
132 features.8.conv.3.weight     torch.Size([192, 1, 3, 3])
133 features.8.conv.4.weight     torch.Size([192])
134 features.8.conv.4.bias       torch.Size([192])
135 features.8.conv.4.running_mean       torch.Size([192])
136 features.8.conv.4.running_var        torch.Size([192])
137 features.8.conv.4.num_batches_tracked        torch.Size([])
138 features.8.conv.6.weight     torch.Size([32, 192, 1, 1])
139 features.8.conv.7.weight     torch.Size([32])
140 features.8.conv.7.bias       torch.Size([32])
141 features.8.conv.7.running_mean       torch.Size([32])
142 features.8.conv.7.running_var        torch.Size([32])
143 features.8.conv.7.num_batches_tracked        torch.Size([])
144 features.9.conv.0.weight     torch.Size([192, 32, 1, 1])
145 features.9.conv.1.weight     torch.Size([192])
146 features.9.conv.1.bias       torch.Size([192])
147 features.9.conv.1.running_mean       torch.Size([192])
148 features.9.conv.1.running_var        torch.Size([192])
149 features.9.conv.1.num_batches_tracked        torch.Size([])
150 features.9.conv.3.weight     torch.Size([192, 1, 3, 3])
151 features.9.conv.4.weight     torch.Size([192])
152 features.9.conv.4.bias       torch.Size([192])
153 features.9.conv.4.running_mean       torch.Size([192])
154 features.9.conv.4.running_var        torch.Size([192])
155 features.9.conv.4.num_batches_tracked        torch.Size([])
156 features.9.conv.6.weight     torch.Size([32, 192, 1, 1])
157 features.9.conv.7.weight     torch.Size([32])
158 features.9.conv.7.bias       torch.Size([32])
159 features.9.conv.7.running_mean       torch.Size([32])
160 features.9.conv.7.running_var        torch.Size([32])
161 features.9.conv.7.num_batches_tracked        torch.Size([])
162 features.10.conv.0.weight    torch.Size([192, 32, 1, 1])
163 features.10.conv.1.weight    torch.Size([192])
164 features.10.conv.1.bias      torch.Size([192])
165 features.10.conv.1.running_mean      torch.Size([192])
166 features.10.conv.1.running_var       torch.Size([192])
167 features.10.conv.1.num_batches_tracked       torch.Size([])
168 features.10.conv.3.weight    torch.Size([192, 1, 3, 3])
169 features.10.conv.4.weight    torch.Size([192])
170 features.10.conv.4.bias      torch.Size([192])
171 features.10.conv.4.running_mean      torch.Size([192])
172 features.10.conv.4.running_var       torch.Size([192])
173 features.10.conv.4.num_batches_tracked       torch.Size([])
174 features.10.conv.6.weight    torch.Size([32, 192, 1, 1])
175 features.10.conv.7.weight    torch.Size([32])
176 features.10.conv.7.bias      torch.Size([32])
177 features.10.conv.7.running_mean      torch.Size([32])
178 features.10.conv.7.running_var       torch.Size([32])
179 features.10.conv.7.num_batches_tracked       torch.Size([])
180 features.11.conv.0.weight    torch.Size([192, 32, 1, 1])
181 features.11.conv.1.weight    torch.Size([192])
182 features.11.conv.1.bias      torch.Size([192])
183 features.11.conv.1.running_mean      torch.Size([192])
184 features.11.conv.1.running_var       torch.Size([192])
185 features.11.conv.1.num_batches_tracked       torch.Size([])
186 features.11.conv.3.weight    torch.Size([192, 1, 3, 3])
187 features.11.conv.4.weight    torch.Size([192])
188 features.11.conv.4.bias      torch.Size([192])
189 features.11.conv.4.running_mean      torch.Size([192])
190 features.11.conv.4.running_var       torch.Size([192])
191 features.11.conv.4.num_batches_tracked       torch.Size([])
192 features.11.conv.6.weight    torch.Size([48, 192, 1, 1])
193 features.11.conv.7.weight    torch.Size([48])
194 features.11.conv.7.bias      torch.Size([48])
195 features.11.conv.7.running_mean      torch.Size([48])
196 features.11.conv.7.running_var       torch.Size([48])
197 features.11.conv.7.num_batches_tracked       torch.Size([])
198 features.12.conv.0.weight    torch.Size([288, 48, 1, 1])
199 features.12.conv.1.weight    torch.Size([288])
200 features.12.conv.1.bias      torch.Size([288])
201 features.12.conv.1.running_mean      torch.Size([288])
202 features.12.conv.1.running_var       torch.Size([288])
203 features.12.conv.1.num_batches_tracked       torch.Size([])
204 features.12.conv.3.weight    torch.Size([288, 1, 3, 3])
205 features.12.conv.4.weight    torch.Size([288])
206 features.12.conv.4.bias      torch.Size([288])
207 features.12.conv.4.running_mean      torch.Size([288])
208 features.12.conv.4.running_var       torch.Size([288])
209 features.12.conv.4.num_batches_tracked       torch.Size([])
210 features.12.conv.6.weight    torch.Size([48, 288, 1, 1])
211 features.12.conv.7.weight    torch.Size([48])
212 features.12.conv.7.bias      torch.Size([48])
213 features.12.conv.7.running_mean      torch.Size([48])
214 features.12.conv.7.running_var       torch.Size([48])
215 features.12.conv.7.num_batches_tracked       torch.Size([])
216 features.13.conv.0.weight    torch.Size([288, 48, 1, 1])
217 features.13.conv.1.weight    torch.Size([288])
218 features.13.conv.1.bias      torch.Size([288])
219 features.13.conv.1.running_mean      torch.Size([288])
220 features.13.conv.1.running_var       torch.Size([288])
221 features.13.conv.1.num_batches_tracked       torch.Size([])
222 features.13.conv.3.weight    torch.Size([288, 1, 3, 3])
223 features.13.conv.4.weight    torch.Size([288])
224 features.13.conv.4.bias      torch.Size([288])
225 features.13.conv.4.running_mean      torch.Size([288])
226 features.13.conv.4.running_var       torch.Size([288])
227 features.13.conv.4.num_batches_tracked       torch.Size([])
228 features.13.conv.6.weight    torch.Size([48, 288, 1, 1])
229 features.13.conv.7.weight    torch.Size([48])
230 features.13.conv.7.bias      torch.Size([48])
231 features.13.conv.7.running_mean      torch.Size([48])
232 features.13.conv.7.running_var       torch.Size([48])
233 features.13.conv.7.num_batches_tracked       torch.Size([])
234 features.14.conv.0.weight    torch.Size([288, 48, 1, 1])
235 features.14.conv.1.weight    torch.Size([288])
236 features.14.conv.1.bias      torch.Size([288])
237 features.14.conv.1.running_mean      torch.Size([288])
238 features.14.conv.1.running_var       torch.Size([288])
239 features.14.conv.1.num_batches_tracked       torch.Size([])
240 features.14.conv.3.weight    torch.Size([288, 1, 3, 3])
241 features.14.conv.4.weight    torch.Size([288])
242 features.14.conv.4.bias      torch.Size([288])
243 features.14.conv.4.running_mean      torch.Size([288])
244 features.14.conv.4.running_var       torch.Size([288])
245 features.14.conv.4.num_batches_tracked       torch.Size([])
246 features.14.conv.6.weight    torch.Size([80, 288, 1, 1])
247 features.14.conv.7.weight    torch.Size([80])
248 features.14.conv.7.bias      torch.Size([80])
249 features.14.conv.7.running_mean      torch.Size([80])
250 features.14.conv.7.running_var       torch.Size([80])
251 features.14.conv.7.num_batches_tracked       torch.Size([])
252 features.15.conv.0.weight    torch.Size([480, 80, 1, 1])
253 features.15.conv.1.weight    torch.Size([480])
254 features.15.conv.1.bias      torch.Size([480])
255 features.15.conv.1.running_mean      torch.Size([480])
256 features.15.conv.1.running_var       torch.Size([480])
257 features.15.conv.1.num_batches_tracked       torch.Size([])
258 features.15.conv.3.weight    torch.Size([480, 1, 3, 3])
259 features.15.conv.4.weight    torch.Size([480])
260 features.15.conv.4.bias      torch.Size([480])
261 features.15.conv.4.running_mean      torch.Size([480])
262 features.15.conv.4.running_var       torch.Size([480])
263 features.15.conv.4.num_batches_tracked       torch.Size([])
264 features.15.conv.6.weight    torch.Size([80, 480, 1, 1])
265 features.15.conv.7.weight    torch.Size([80])
266 features.15.conv.7.bias      torch.Size([80])
267 features.15.conv.7.running_mean      torch.Size([80])
268 features.15.conv.7.running_var       torch.Size([80])
269 features.15.conv.7.num_batches_tracked       torch.Size([])
270 features.16.conv.0.weight    torch.Size([480, 80, 1, 1])
271 features.16.conv.1.weight    torch.Size([480])
272 features.16.conv.1.bias      torch.Size([480])
273 features.16.conv.1.running_mean      torch.Size([480])
274 features.16.conv.1.running_var       torch.Size([480])
275 features.16.conv.1.num_batches_tracked       torch.Size([])
276 features.16.conv.3.weight    torch.Size([480, 1, 3, 3])
277 features.16.conv.4.weight    torch.Size([480])
278 features.16.conv.4.bias      torch.Size([480])
279 features.16.conv.4.running_mean      torch.Size([480])
280 features.16.conv.4.running_var       torch.Size([480])
281 features.16.conv.4.num_batches_tracked       torch.Size([])
282 features.16.conv.6.weight    torch.Size([80, 480, 1, 1])
283 features.16.conv.7.weight    torch.Size([80])
284 features.16.conv.7.bias      torch.Size([80])
285 features.16.conv.7.running_mean      torch.Size([80])
286 features.16.conv.7.running_var       torch.Size([80])
287 features.16.conv.7.num_batches_tracked       torch.Size([])
288 features.17.conv.0.weight    torch.Size([480, 80, 1, 1])
289 features.17.conv.1.weight    torch.Size([480])
290 features.17.conv.1.bias      torch.Size([480])
291 features.17.conv.1.running_mean      torch.Size([480])
292 features.17.conv.1.running_var       torch.Size([480])
293 features.17.conv.1.num_batches_tracked       torch.Size([])
294 features.17.conv.3.weight    torch.Size([480, 1, 3, 3])
295 features.17.conv.4.weight    torch.Size([480])
296 features.17.conv.4.bias      torch.Size([480])
297 features.17.conv.4.running_mean      torch.Size([480])
298 features.17.conv.4.running_var       torch.Size([480])
299 features.17.conv.4.num_batches_tracked       torch.Size([])
300 features.17.conv.6.weight    torch.Size([160, 480, 1, 1])
301 features.17.conv.7.weight    torch.Size([160])
302 features.17.conv.7.bias      torch.Size([160])
303 features.17.conv.7.running_mean      torch.Size([160])
304 features.17.conv.7.running_var       torch.Size([160])
305 features.17.conv.7.num_batches_tracked       torch.Size([])
306 conv2.0.weight       torch.Size([128, 160, 1, 1])
307 conv2.1.weight       torch.Size([128])
308 conv2.1.bias         torch.Size([128])
309 conv2.1.running_mean         torch.Size([128])
310 conv2.1.running_var          torch.Size([128])
311 conv2.1.num_batches_tracked          torch.Size([])
312 deconv_layers.0.weight       torch.Size([128, 1, 4, 4])
313 deconv_layers.1.weight       torch.Size([128])
314 deconv_layers.1.bias         torch.Size([128])
315 deconv_layers.1.running_mean         torch.Size([128])
316 deconv_layers.1.running_var          torch.Size([128])
317 deconv_layers.1.num_batches_tracked          torch.Size([])
318 deconv_layers.3.weight       torch.Size([128, 128, 1, 1])
319 deconv_layers.4.weight       torch.Size([128])
320 deconv_layers.4.bias         torch.Size([128])
321 deconv_layers.4.running_mean         torch.Size([128])
322 deconv_layers.4.running_var          torch.Size([128])
323 deconv_layers.4.num_batches_tracked          torch.Size([])
324 deconv_layers.6.weight       torch.Size([128, 1, 4, 4])
325 deconv_layers.7.weight       torch.Size([128])
326 deconv_layers.7.bias         torch.Size([128])
327 deconv_layers.7.running_mean         torch.Size([128])
328 deconv_layers.7.running_var          torch.Size([128])
329 deconv_layers.7.num_batches_tracked          torch.Size([])
330 deconv_layers.9.weight       torch.Size([128, 128, 1, 1])
331 deconv_layers.10.weight      torch.Size([128])
332 deconv_layers.10.bias        torch.Size([128])
333 deconv_layers.10.running_mean        torch.Size([128])
334 deconv_layers.10.running_var         torch.Size([128])
335 deconv_layers.10.num_batches_tracked         torch.Size([])
336 deconv_layers.12.weight      torch.Size([128, 1, 4, 4])
337 deconv_layers.13.weight      torch.Size([128])
338 deconv_layers.13.bias        torch.Size([128])
339 deconv_layers.13.running_mean        torch.Size([128])
340 deconv_layers.13.running_var         torch.Size([128])
341 deconv_layers.13.num_batches_tracked         torch.Size([])
342 deconv_layers.15.weight      torch.Size([128, 128, 1, 1])
343 deconv_layers.16.weight      torch.Size([128])
344 deconv_layers.16.bias        torch.Size([128])
345 deconv_layers.16.running_mean        torch.Size([128])
346 deconv_layers.16.running_var         torch.Size([128])
347 deconv_layers.16.num_batches_tracked         torch.Size([])
348 final_layer.weight   torch.Size([17, 128, 1, 1])

Using CUDA device0 _CudaDeviceProperties(name='GeForce RTX 2080 Ti', total_memory=11019MB)
           device1 _CudaDeviceProperties(name='GeForce RTX 2080 Ti', total_memory=11019MB)
           device2 _CudaDeviceProperties(name='GeForce RTX 2080 Ti', total_memory=11019MB)

Load model weight from output/coco/256x192_d256x3_adam_lr1e-3_mobile8_relu/final_state_560.pth.tar




*******************quant_model*******************
 PoseMobileNet(
  (features): Sequential(
    (0): Sequential(
      (0): QuanConv2d(
        3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (quan_w_fn): LsqQuan()
        (quan_a_fn): LsqQuan()
      )
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (1): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          16, 8, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          8, 48, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          288, 288, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=288, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          288, 80, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (17): InvertedResidual(
      (conv): Sequential(
        (0): QuanConv2d(
          80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): QuanConv2d(
          480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (4): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): QuanConv2d(
          480, 160, kernel_size=(1, 1), stride=(1, 1), bias=False
          (quan_w_fn): LsqQuan()
          (quan_a_fn): LsqQuan()
        )
        (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv2): Sequential(
    (0): QuanConv2d(
      160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (deconv_layers): Sequential(
    (0): QuanConvTranspose2d(
      128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), groups=128, bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): QuanConv2d(
      128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): QuanConvTranspose2d(
      128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), groups=128, bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): QuanConv2d(
      128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (10): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU(inplace=True)
    (12): QuanConvTranspose2d(
      128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), groups=128, bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (13): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (14): ReLU(inplace=True)
    (15): QuanConv2d(
      128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
      (quan_w_fn): LsqQuan()
      (quan_a_fn): LsqQuan()
    )
    (16): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
  )
  (final_layer): QuanConv2d(
    128, 17, kernel_size=(1, 1), stride=(1, 1), bias=False
    (quan_w_fn): LsqQuan()
    (quan_a_fn): LsqQuan()
  )
)

*******************Using quant_model in test*******************